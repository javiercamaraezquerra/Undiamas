name: Build APK and AAB

on:
  push:
    branches: [ Final-2 ]

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      GRADLE_OPTS: -Dorg.gradle.configuration-cache=true -Dorg.gradle.parallel=true

    steps:
    # 1) Checkout
    - uses: actions/checkout@v3
      with: { fetch-depth: 1 }

    # 2) FFmpeg (solo si falta)
    - name: Ensure FFmpeg
      run: |
        command -v ffmpeg >/dev/null || {
          sudo apt-get update -qq
          sudo apt-get install -y ffmpeg
        }

    # 3) Re‑encode MP3
    - run: |
        [ -f assets/audio/relax60s.mp3 ] || { echo "❌ MP3 no existe"; exit 1; }
        ffmpeg -y -i assets/audio/relax60s.mp3 -codec:a libmp3lame -b:a 128k /tmp/relax.mp3
        mv /tmp/relax.mp3 assets/audio/relax60s.mp3

    # 4) Flutter SDK + Android SDK (crea cmdline‑tools/latest)
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with: { channel: stable, cache: true }

    # 5) Cache/instala CMake 3.22.1 ──── (DESPUÉS de flutter-action)
    - name: Restore CMake 3.22.1 cache
      id: cmake-cache
      uses: actions/cache@v4
      with:
        path: ${{ env.ANDROID_SDK_ROOT }}/cmake/3.22.1
        key:  ${{ runner.os }}-cmake-3.22.1

    - name: Install CMake 3.22.1 (first run only)
      if: steps.cmake-cache.outputs.cache-hit != 'true'
      run: |
        echo "→ instalando CMake 3.22.1 en el SDK"
        yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" "cmake;3.22.1" > /dev/null

    # 6) Restaurar caches Pub & Gradle
    - uses: actions/cache@v4
      name: Restore Pub cache
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: ${{ runner.os }}-pub-
    - uses: actions/cache@v4
      name: Restore Gradle cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    # 7) Dependencias + QA
    - run: flutter pub get
    - run: dart run flutter_launcher_icons
    - run: dart fix --apply
    - run: dart format --output=none .
    - run: flutter analyze --no-pub --no-fatal-warnings --no-fatal-infos
    - run: flutter test

    # 8) Keystore
    - run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/undiamas.jks
    - run: |
        cat > android/key.properties <<EOF
        storePassword=${{ secrets.STORE_PASSWORD }}
        keyPassword=${{ secrets.KEY_PASSWORD }}
        keyAlias=${{ secrets.KEY_ALIAS }}
        storeFile=undiamas.jks
        EOF

    # 9) Build AAB y APK
    - name: Build release AAB
      run: flutter build appbundle --release
    - name: Build release APK
      run: flutter build apk --release

    # 10) mapping.txt
    - uses: actions/upload-artifact@v4
      with: { name: r8-mapping, path: build/app/outputs/mapping/release/mapping.txt }

    # 11) Verificar MP3
    - run: |
        unzip -l build/app/outputs/flutter-apk/app-release.apk | grep -q 'assets/audio/relax60s.mp3'

    # 12) Artefactos
    - uses: actions/upload-artifact@v4
      with: { name: undiamas-apk, path: build/app/outputs/flutter-apk/app-release.apk }
    - uses: actions/upload-artifact@v4
      with: { name: undiamas-aab, path: build/app/outputs/bundle/release/app-release.aab }

    # 13) Guardar caches
    - uses: actions/cache/save@v4
      if: always()
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
    - uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
    - uses: actions/cache/save@v4
      if: always()
      with:
        path: ${{ env.ANDROID_SDK_ROOT }}/cmake/3.22.1
        key:  ${{ runner.os }}-cmake-3.22.1
